{"ast":null,"code":"// Update ApiService to use the config file for API URL\nimport axios from 'axios';\nimport config from '../config';\nclass ApiService {\n  /**\n   * Check Gmail authentication status\n   * @returns {Promise<Object>} Authentication status\n   */\n  async checkGmailAuth() {\n    try {\n      // Try to get tracking emails as a way to check authentication\n      const response = await axios.get(`${config.apiUrl}/emails/tracking`);\n      return {\n        authenticated: true,\n        data: response.data\n      };\n    } catch (error) {\n      if (error.response && error.response.status === 401) {\n        return {\n          authenticated: false\n        };\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get Gmail authentication URL\n   * @returns {Promise<Object>} Authentication URL\n   */\n  async getGmailAuthUrl() {\n    const response = await axios.get(`${config.apiUrl}/auth/gmail/url`);\n    return response.data;\n  }\n\n  /**\n   * Save Gmail authentication token\n   * @param {string} code - Authorization code\n   * @returns {Promise<Object>} Authentication result\n   */\n  async saveGmailToken(code) {\n    const response = await axios.post(`${config.apiUrl}/auth/gmail/token`, {\n      code\n    });\n    return response.data;\n  }\n\n  /**\n   * Get unread tracking emails\n   * @returns {Promise<Object>} Tracking emails\n   */\n  async getTrackingEmails() {\n    const response = await axios.get(`${config.apiUrl}/emails/tracking`);\n    return response.data;\n  }\n\n  /**\n   * Get confirmation emails for an order number\n   * @param {string} orderNumber - Order number to search for\n   * @returns {Promise<Object>} Confirmation emails\n   */\n  async getConfirmationEmails(orderNumber) {\n    const response = await axios.get(`${config.apiUrl}/emails/confirmation/${orderNumber}`);\n    return response.data;\n  }\n\n  /**\n   * Mark an email as read\n   * @param {string} messageId - ID of the message to mark as read\n   * @returns {Promise<Object>} Result\n   */\n  async markEmailAsRead(messageId) {\n    const response = await axios.post(`${config.apiUrl}/emails/mark-read`, {\n      messageId\n    });\n    return response.data;\n  }\n\n  /**\n   * Get unfulfilled Shopify orders\n   * @returns {Promise<Object>} Unfulfilled orders\n   */\n  async getUnfulfilledOrders() {\n    const response = await axios.get(`${config.apiUrl}/shopify/orders`);\n    return response.data;\n  }\n\n  /**\n   * Search for unfulfilled orders by customer name\n   * @param {string} customerName - Customer name to search for\n   * @returns {Promise<Object>} Matching unfulfilled orders\n   */\n  async searchOrdersByCustomerName(customerName) {\n    const response = await axios.get(`${config.apiUrl}/shopify/orders/search/${encodeURIComponent(customerName)}`);\n    return response.data;\n  }\n\n  /**\n   * Fulfill an order with tracking information\n   * @param {string} orderId - Shopify order ID\n   * @param {Object} trackingInfo - Tracking information object\n   * @param {boolean} notifyCustomer - Whether to notify the customer\n   * @returns {Promise<Object>} Fulfillment result\n   */\n  async fulfillOrder(orderId, trackingInfo, notifyCustomer = false) {\n    const response = await axios.post(`${config.apiUrl}/shopify/fulfill`, {\n      orderId,\n      trackingInfo,\n      notifyCustomer\n    });\n    return response.data;\n  }\n\n  /**\n   * Process a tracking email through the complete workflow\n   * @param {string} emailId - ID of the tracking email\n   * @returns {Promise<Object>} Processing result\n   */\n  async processTrackingEmail(emailId) {\n    const response = await axios.post(`${config.apiUrl}/process/tracking-email`, {\n      emailId\n    });\n    return response.data;\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","config","ApiService","checkGmailAuth","response","get","apiUrl","authenticated","data","error","status","getGmailAuthUrl","saveGmailToken","code","post","getTrackingEmails","getConfirmationEmails","orderNumber","markEmailAsRead","messageId","getUnfulfilledOrders","searchOrdersByCustomerName","customerName","encodeURIComponent","fulfillOrder","orderId","trackingInfo","notifyCustomer","processTrackingEmail","emailId"],"sources":["/Users/abdelilahazilal/Downloads/order-fulfillment-app/frontend/src/services/ApiService.js"],"sourcesContent":["// Update ApiService to use the config file for API URL\nimport axios from 'axios';\nimport config from '../config';\n\nclass ApiService {\n  /**\n   * Check Gmail authentication status\n   * @returns {Promise<Object>} Authentication status\n   */\n  async checkGmailAuth() {\n    try {\n      // Try to get tracking emails as a way to check authentication\n      const response = await axios.get(`${config.apiUrl}/emails/tracking`);\n      return { authenticated: true, data: response.data };\n    } catch (error) {\n      if (error.response && error.response.status === 401) {\n        return { authenticated: false };\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get Gmail authentication URL\n   * @returns {Promise<Object>} Authentication URL\n   */\n  async getGmailAuthUrl() {\n    const response = await axios.get(`${config.apiUrl}/auth/gmail/url`);\n    return response.data;\n  }\n\n  /**\n   * Save Gmail authentication token\n   * @param {string} code - Authorization code\n   * @returns {Promise<Object>} Authentication result\n   */\n  async saveGmailToken(code) {\n    const response = await axios.post(`${config.apiUrl}/auth/gmail/token`, { code });\n    return response.data;\n  }\n\n  /**\n   * Get unread tracking emails\n   * @returns {Promise<Object>} Tracking emails\n   */\n  async getTrackingEmails() {\n    const response = await axios.get(`${config.apiUrl}/emails/tracking`);\n    return response.data;\n  }\n\n  /**\n   * Get confirmation emails for an order number\n   * @param {string} orderNumber - Order number to search for\n   * @returns {Promise<Object>} Confirmation emails\n   */\n  async getConfirmationEmails(orderNumber) {\n    const response = await axios.get(`${config.apiUrl}/emails/confirmation/${orderNumber}`);\n    return response.data;\n  }\n\n  /**\n   * Mark an email as read\n   * @param {string} messageId - ID of the message to mark as read\n   * @returns {Promise<Object>} Result\n   */\n  async markEmailAsRead(messageId) {\n    const response = await axios.post(`${config.apiUrl}/emails/mark-read`, { messageId });\n    return response.data;\n  }\n\n  /**\n   * Get unfulfilled Shopify orders\n   * @returns {Promise<Object>} Unfulfilled orders\n   */\n  async getUnfulfilledOrders() {\n    const response = await axios.get(`${config.apiUrl}/shopify/orders`);\n    return response.data;\n  }\n\n  /**\n   * Search for unfulfilled orders by customer name\n   * @param {string} customerName - Customer name to search for\n   * @returns {Promise<Object>} Matching unfulfilled orders\n   */\n  async searchOrdersByCustomerName(customerName) {\n    const response = await axios.get(`${config.apiUrl}/shopify/orders/search/${encodeURIComponent(customerName)}`);\n    return response.data;\n  }\n\n  /**\n   * Fulfill an order with tracking information\n   * @param {string} orderId - Shopify order ID\n   * @param {Object} trackingInfo - Tracking information object\n   * @param {boolean} notifyCustomer - Whether to notify the customer\n   * @returns {Promise<Object>} Fulfillment result\n   */\n  async fulfillOrder(orderId, trackingInfo, notifyCustomer = false) {\n    const response = await axios.post(`${config.apiUrl}/shopify/fulfill`, {\n      orderId,\n      trackingInfo,\n      notifyCustomer\n    });\n    return response.data;\n  }\n\n  /**\n   * Process a tracking email through the complete workflow\n   * @param {string} emailId - ID of the tracking email\n   * @returns {Promise<Object>} Processing result\n   */\n  async processTrackingEmail(emailId) {\n    const response = await axios.post(`${config.apiUrl}/process/tracking-email`, { emailId });\n    return response.data;\n  }\n}\n\nexport default new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}